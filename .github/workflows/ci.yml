# Copyright 2025 刘子健_LiuZijian
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# 这个文件的目的是在代码提交或拉取请求时自动执行一系列检查，以确保代码质量、风格一致性、通过测试并进行安全扫描。
name: CI

# 这定义了工作流的名称，它会显示在 GitHub Actions 的界面上，例如 "CI"。

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 这部分定义了触发此工作流的事件。
  # push:
    # branches: [ main, develop ]: 当有代码被推送到 main 分支或 develop 分支时，此工作流将被触发。
  # pull_request:
    # branches: [ main, develop ]: 当有拉取请求 (Pull Request) 提交到 main 分支或 develop 分支时，此工作流也将被触发。
    # 这意味着在合并代码到这些关键分支之前，会自动进行检查。

jobs:
  # 这里定义了工作流中的一个或多个 "作业" (jobs)。这个工作流中有一个名为 test 的作业。
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]  # Only run on Windows
        python-version: ['3.12'] # Only use Python 3.12

  # steps 定义了作业中要执行的一系列任务（步骤）。


    steps:
      # actions/checkout@v4 是 GitHub 官方提供的一个 Action，用来在 CI/CD 运行器（runner）+
      # 上把你的仓库代码检出（checkout）到本地工作目录，以便后续的步骤可以访问和操作这些文件。
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Python 运行环境，使用 matrix 中指定的 Python 版本（如 3.12）
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 缓存 pip 依赖，加速后续 workflow 运行
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 安装项目依赖和开发依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      # 使用 flake8 对代码进行静态检查（Lint），确保代码风格和质量
      # flake8 是一个流行的 Python 代码风格检查工具，可以检测语法错误、不规范的代码风格和潜在的 bug
      # 第一行命令：只统计严重错误（如语法错误、未定义变量等），并显示详细信息
      # 第二行命令：统计所有问题，但不会因为发现问题而导致 CI 失败（exit-zero），并限制最大圈复杂度和最大行长度
      - name: Lint with flake8
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      # 使用 black 检查代码格式是否符合规范（不会自动修复，只检查）
      - name: Format check with black
        run: |
          black --check src tests

      # 使用 mypy 进行类型检查，确保类型注解的正确性
      - name: Type check with mypy
        run: |
          mypy src

      # 使用 isort 检查 import 顺序是否规范（只检查，不自动修复）
      # isort 是一个自动排序 Python import 语句的工具，这里只做检查，保证 import 顺序统一
      - name: Sort imports check with isort
        run: |
          isort --check-only src tests

      # 使用 pytest 运行单元测试，并生成覆盖率报告（xml 和终端输出）
      # pytest 是 Python 的主流测试框架，--cov 相关参数用于统计 src 目录的测试覆盖率
      - name: Run tests with pytest
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      # 上传测试覆盖率报告到 Codecov 平台
      # Codecov 是一个第三方代码覆盖率可视化和追踪平台，可以将本地生成的 coverage.xml 上传到云端，
      # 便于团队成员在网页上直观查看每次提交的测试覆盖率变化，发现未覆盖的代码区域，提升代码质量
      # file: 指定上传的覆盖率报告文件
      # flags/name: 用于标记和区分不同类型的测试或上传来源
      # fail_ci_if_error: false 表示上传失败不会导致整个 CI 失败
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # "security" 作业：专门用于执行代码安全相关的检查。
  security:
    needs: test
    # runs-on: 指定作业运行的虚拟环境类型。这里使用最新的 Ubuntu 系统。
    runs-on: ubuntu-latest
    # steps 定义了此作业中要执行的一系列任务。
    steps:
    # 步骤1: 检出代码
    # 使用 actions/checkout@v4 Action 将仓库代码下载到运行器的工作目录。
    - name: Checkout code
      uses: actions/checkout@v4

    # 步骤2: 设置 Python 环境
    # 使用 actions/setup-python@v4 Action 来安装指定版本的 Python。
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # 步骤3: 安装安全检查相关的依赖
    # 首先升级 pip 工具自身。
    # 然后安装 safety 和 bandit 这两个 Python 安全扫描工具。
    #   - safety: 用于检查项目依赖中是否存在已知的安全漏洞。
    #   - bandit: 用于静态分析 Python 代码，查找常见的安全问题。
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    # 步骤4: 使用 safety 进行依赖安全检查
    # safety check 命令会扫描当前 Python 环境中已安装的包（或通过 -r 指定需求文件）
    # 并对照已知的漏洞数据库进行检查。
    # 优化建议：为了更精确地检查项目依赖，可以考虑使用 `safety check -r requirements.txt`
    # （如果 `requirements.txt` 包含了所有生产环境依赖）。
    # 当前命令会检查环境中所有包，包括 `bandit` 和 `safety` 自身。
    - name: Security check with safety
      run: |
        safety check -r requirements.txt

    # 步骤5: 使用 bandit 进行静态代码安全分析
    # bandit -r src/: 递归扫描 src/ 目录下的 Python 代码。
    # -f json: 指定输出格式为 JSON。
    # -o bandit-report.json: 将扫描结果保存到名为 bandit-report.json 的文件中。
    # || true: 这是一个重要的部分。bandit 在发现问题时会以非零状态码退出，这通常会导致 CI 步骤失败。
    #   `|| true` 表示无论 bandit 命令的退出状态码是什么，这个 run 步骤本身都将成功结束。
    #   这样做是为了确保即使 bandit 发现了潜在问题，CI 流程也能继续执行（例如上传报告），而不是立即中断。
    #   安全问题通常需要人工审查，而不是直接阻塞流水线。
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    # 步骤6: 上传 bandit 的扫描报告
    # 使用 actions/upload-artifact@v3 Action 将 bandit 生成的报告作为构建产物上传。
    # 这样，用户可以在 GitHub Actions 的运行结果页面下载和查看这份报告。
    # name: bandit-report: 定义了上传产物的名称。
    # path: bandit-report.json: 指定了要上传的文件的路径。
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json
